apiVersion: v1
kind: Service
metadata:
 name: app-loadbalancer
spec:
 type: LoadBalancer
 selector:
    app: booking-app
 ports:
  - name: "80"
    port: 80
    targetPort: 8080
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: booking-app
spec:
  selector:
    matchLabels:
      app: booking-app
  replicas: 5
  template:
    metadata:
      labels:
        app: booking-app
    spec:
      containers:
      - name: booking-app
        image: table-app:node
        imagePullPolicy: "IfNotPresent"
        lifecycle:
          postStart:
            exec:
              command: ["cp" , "-a" , "/usr/src/app/uploadstemp/." ,"/usr/src/app/uploads/"]
        ports:
        - containerPort: 8080
        env:
        - name: DBPASS
          valueFrom:
            secretKeyRef:
              name: app-secrets
              key: dbpassword
        - name: DBSERVER
          value: mysql-service
        - name: PROD_PASS_SECRET
          valueFrom:
            secretKeyRef:
              name: app-secrets
              key: passhash
        - name: PROD_SECRET_TOKEN
          valueFrom:
            secretKeyRef:
              name: app-secrets
              key: jwttoken
        resources:
          limits:
            memory: "128Mi" #128 MB
            cpu: "200m" #200 millicpu (.2 cpu or 20% of the cpu)
        volumeMounts:
        - name: picturesstorage
          mountPath: /usr/src/app/uploads/
      volumes:
      - name: picturesstorage
        persistentVolumeClaim:
          claimName: pictures-claim
      initContainers:
      - name: init-mysql
        image: busybox
        command: ['sh', '-c', 'sleep 30;']
        #command: ['sh', '-c', 'until nslookup mysql-service; do echo waiting for mysql; sleep 2s; done;']
